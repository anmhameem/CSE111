//Task 1 
public class Person {
    private String name, type, vac;
    private int age, days;
    private boolean d1, d2;

    public Person(String name, int age, String type) {
        this.name = name;
        this.age = age;
        this.type = type;
    }

    public Person(String name, int age) {
        this.name = name;
        this.age = age;
        this.type = "General Citizen";
    }

    public String getName() {
        return name;
    }

    public int getAge() {
        return age;
    }

    public String getType() {
        return type;
    }

    public String getVac() {
        return vac;
    }

    public void pushVaccine(Vaccine v) {
        if (type.equals("Student")) {
            this.vac = v.getVac();
            this.days = v.getDays();
            if (!d1 && !d2) {
                d1 = true;
                System.out.println("1st dose done for " + getName());
            }
        } else if (age < 25) {
            System.out.println("Sorry " + getName() + ", Minimum age for taking vaccines is 25 years now.");
        }
    }

    public void showDetail() {
        System.out.println("Name: " + getName() + " Age: " + age + " Type: " + type);
        System.out.println("Vaccine name: " + (vac != null ? vac : "Not assigned"));
        System.out.println("1st dose: " + (d1 ? "Given" : "Not given"));
        System.out.println("2nd dose: " + (d2 ? "Given" : "Please come after " + days + " days"));
    }

    public void pushVaccine(Vaccine v, String dose) {
        if (vac == null) { // Assign vaccine if it's the first dose
            this.vac = v.getVac();
            this.days = v.getDays();
        }

        // Ensure invalid dose request is checked first
        if (dose.equals("2nd Dose") && !d1) {
            System.out.println("Sorry " + name + ", Invalid dose request");
            return; // Exit early to prevent further checks
        }

        if (v.getVac().equals(vac)) {
            if (dose.equals("2nd Dose") && d1 && !d2) {
                d2 = true;
                System.out.println("2nd dose done for " + name);
            } else if (d1 && d2) {
                System.out.println("Sorry " + name + ", You have already received both doses.");
            } else if (dose.equals("1st Dose") && !d1 && !d2) {
                d1 = true;
                System.out.println("1st dose done for " + getName());
            }
        } else if (vac != null) { // Handles vaccine mismatch
            System.out.println("Sorry " + name + ", you can't take 2 different vaccines.");
        }
    }
}
class Vaccine {
    private String vac, origin;
    private int days;

    public Vaccine(String name, String origin, int days) {
        this.vac = name;
        this.origin = origin;
        this.days = days;
    }

    public String getVac() {
        return vac;
    }

    public int getDays() {
        return days;
    }
}





//Task 2 
public class NikeBD {
	public int jordan,cortez,kobe ,sold;
	public static int j,c,k ,s,branch  ;
	public String name;
	public NikeBD(String name) {
		this.name = name ;
		branch++;
	}

	public static void status() {
		System.out.println("Nike Bangladesh Status: \nBranches Opened: " + branch + "\nCurrently stocked : Jordan : "+ j +", Cortez : " + c  + ", Kobe: "+ k+ "\nSold: " + s);
	}

	public void details() {
		System.out.println("Nike " + name + " outlet: \nProducts Currently Stocked: Jordan: " + jordan +", Cortez : " + cortez  + ", Kobe: "+ kobe+ "\nSold: " + sold );
	}

	public void restockProducts(String product, int qty) {
		if(product.equals("Jordan")) {
			jordan+=qty;
			j+=qty;
			
		} else if(product.equals("Cortez")) {
			cortez+=qty;
			c+=qty;
		} else if(product.equals("Kobe")) {
			kobe+=qty;
			k+=qty; 
		}
	}

	public void restockProducts(String[]p, int[]qt) {
		for(int i = 0 ; i<p.length ; i++) {
			restockProducts(p[i],qt[i]);
		}
	}

	public void productSold(String p1, int qt, String p2,int qt2) {
		if(p1.equals("Jordan")) {
			s+=qt;
			sold+=qt; 
			jordan-=qt;
			j-=qt; 
			
		} else if(p1.equals("Cortez")) {
		    s+=qt;
			sold+=qt;
			cortez-=qt;
			c-=qt;
		} else if(p1.equals("Kobe")) {
			s+=qt;
			sold+=qt;
			kobe-=qt;
			k-=qt; 
		}

		if(p2.equals("Jordan")) {
		    s+=qt2;
			sold+=qt2;
			jordan-=qt2;
			j-=qt2;
		} else if(p2.equals("Cortez")) {
		    s+=qt2;
			sold+=qt2;
			cortez-=qt2;
			c-=qt2;
		} else if(p2.equals("Kobe")) {
		    s+=qt2;
			sold+=qt2;
			kobe-=qt2;
			k-=qt2;
		}
	}

}


// task 3 

public class Striker extends Football{
    public int goals,shots; 
    public double performance;
    
    public Striker(String name , int age , int stamina, int goals , int shots){
        super(name,age,stamina); 
        this.goals = goals;
        this.shots = shots; 
    }
    
    public void display(){
        super.display(); 
        System.out.println("Goals: " + goals + "\nShots on target: " + shots); 
    }
    
    public void calculatePerformance(){
        performance = (double)goals/shots;
        System.out.println("Performance: "+ performance);
    }
}

public class Defender extends Football{
    
    public int tackles , inter ; 
    public double performance; 
    
    public Defender(String name , int age ,int stamina , int tackles , int inter ){
        super(name,age,stamina); 
        this.tackles = tackles; 
        this.inter = inter; 
    }
    
    public void display(){
        super.display(); 
        System.out.println("Tackles : " + tackles+"\nInterceptions: " + inter);
    }
    
    public void calculatePerformance(){
        performance = (double)inter/tackles; 
        System.out.println("Performance: " + performance);
    }
}

//Task 4 

public class Nokia extends Mobile{
    public double balance ; 
    
    public Nokia(String model , boolean act , String imei , double balance){
        
        super(model,imei,act); 
        this.balance = balance ; 
    }
    
    public String toString(){
        return super.toString()+ "\nBalance: " + balance+" TK"; 
    }
    public String dialCall(String num){
        if(balance<=0){
            return "Insufficient balance! Please recharge.";
        }else {
            String nm = num.split("1")[0]; 
            if(nm.equals("880") && simCardStatus){
                return "Dialing the number " + num + " to Bangladesh region.";
            }else if(nm.equals("880") && !simCardStatus){
                return "No SIM card available! Please check the SIM card connectivity";
            }else if(nm.equals("455") && simCardStatus){
                return "Dialing the number " + num + " to USA region."; 
            }else if(nm.equals("455") && !simCardStatus){
                return "No SIM card available! Please check the SIM card connectivity"; 
            }else{
                return "Dialing is not allowed in this region"; 
            }
        }
    }
    
    public void rechargeSIMCard(double amount){
        balance+=amount; 
        System.out.println("Recharge successfull! Current balance "+ balance+ " TK."); 
    }
}


//Task 5 
public class Dragon extends MagicalCreature{
    public int power; 
    
    public Dragon(String name , int age , int power){
        super(name,age); 
        this.power = power ; 
    }
    
    public void makeSound(){
        System.out.println(name+ " roars with a fiery breath!"); 
    }
    
    public void performMagic(){
        System.out.println(name + " breathes fire with power level: " + power); 
    }
    
    public void fly(){
        System.out.println(name + " flies through the sky");
    }
    
}

public class Phoenix extends MagicalCreature{
    public int reborn ; 
    
    public Phoenix(String name , int age, int reborn){
        super(name,age); 
        this.reborn = reborn; 
    }
    
    public void makeSound(){
        System.out.println(name + " sings an enchanting song");
    }
    public void performMagic(){
        System.out.println(name+ " is reborn with " + reborn +" rebirth cycles."); 
    }
    
    public void regenerate(){
        System.out.println(name + " regenerates its body in a burst of flames.");
    }
}

//task 6

public class Bondhus extends SocialMedia{
    
    public String[]msg = new String[6]; 
    public int count = 0 ; 
    
    public Bondhus(String name , String email){
        super(name,email); 
    }
    
    public void showSentbox(){
        System.out.println(userName+ ("'s Sentbox: "));
        if(msg[0]==null){
            System.out.println("No sent messages.");
        } else{
            for(int i = 0 ; i<count; i++){
                System.out.println(msg[i]);
            }
        }
    }
    
    public void sendMessage(String s){
        if(count<3){
        msg[count++]= s ; 
        }else if (count>=3 && count<5){
            if(count==3){
                msg[count++] = s; 
            }
            if(count==4){
                msg[count++] = "Sentbox is full.";
            }
        }
    }
    
    public String toString(){
        return super.toString()+ "\nMessages sent: " + count ; 
    }
}


//Task 7 

public class Patient{
    public static int total = 0;
    public int id_p;
    public String name ,doc ;
    public Patient(String name , String doc ){
        this.name = name ; 
        this.doc = doc ;
        total++; 
        id_p = total; 
    }
    
    public String toString(){
        return "Patient ID: P0"+id_p +",Name: "+name + "\nDoctor: " + doc;  
    }
    
    public static void details(){
        System.out.println("Total patients: " + total); 
    }
    
    public static void details(Patient[] p){
        for(int i = 0 ; i<p.length ; i++){
            System.out.println(p[i]); 
            System.out.println("================");
        }
    }
}

public class InPatient extends Patient{
    
    public String dep ;
    public static int in,out; 
    public InPatient(String name , String doc, String dep){
        super(name,doc);
        this.dep = dep; 
        in++; 
        out = total- in ; 
        System.out.println("New patient admitted in " + dep ); 
        
    }
    
    public String toString(){
        return super.toString()+ "\nDepartment: " + dep; 
    }
    
    public static void details(){
        System.out.println("Total patients: " + total); 
        System.out.println("Admitted In-Patients: " + in); 
        System.out.println("Out-Patients: " + out); 
    }
 
}


//Task 8 

public class SteamDeck extends HandheldPC{
    public int r , s ; 
    
    public SteamDeck(String model, int ram , int storage){
        super("Valve", model, "SteamOS" , ram, storage); 
        this.r = ram ; 
        this.s = storage;
    }
    
    public int getRam(){
        return r; 
    }
    public int getStorage(){
        return s; 
    }
    
    public void bootUp(){
        System.out.println("Steam Deck (" + getModel()+") is booting into " + getOS()+ "..."); 
    }
}


public class ROGAlly extends HandheldPC{
    public boolean rgb; 
    public int r , s ; 
    public ROGAlly(String model, int ram , int storage ,boolean rgb ){
        super("ASUS",model,"Windows 11",ram , storage); 
        this.rgb= rgb ;
        this.r = ram ; 
        this.s = storage; 
    }
    
    public int getRam(){
        return r; 
    }
    public int getStorage(){
        return s; 
    }
    
    public void bootUp(){
        if(rgb){
            System.out.println("ROG Ally ("+ getModel() +") is booting into Windows 11 with RGB ON");  
        }else {
            System.out.println("ROG Ally ("+ getModel() +") is booting into Windows 11 with RGB OFF");
        }
    }
    
}


public class GameStop {
	public int total,steams,rogs,count;
	public HandheldPC [] shelf;


	public GameStop(int total) {
		this.total = total;
		System.out.println("GameStop brought " + total + " devices");
		shelf= new HandheldPC[total];
	}

	public void addDevice(HandheldPC h) {
		if(count<shelf.length) {
			if(h instanceof SteamDeck) {

				SteamDeck deck = (SteamDeck)h;
				shelf[count++] = deck ;
				System.out.println(deck.getBrand() + " " + deck.getModel() + " added to the shelf");
				steams++;
			} else if(h instanceof ROGAlly) {
				ROGAlly rog = (ROGAlly)h;
				shelf[count++] = rog;
				rogs++;
				System.out.println(rog.getBrand()+ " " + rog.getModel() + " added to the shelf");
			} else {
				System.out.println("Invalid type. Only SteamDeck and ROGAlly area allowed");
			}
		} else {
			System.out.println("No more space on shelf for new devices ");
		}
	}


	public void listDevices() {
		System.out.println("Total devices " + total + "\nSteam Decks: " + steams + "\nROG Allies: " + rogs);
		System.out.println("Devices in store: ");
		for(int i = 0 ; i<count ; i++) {
			if(shelf[i] instanceof SteamDeck) {
				SteamDeck deck = (SteamDeck) shelf[i];
				System.out.printf("- %s %s | OS: %s | RAM: %dGB | Storage: %d GB\n",deck.getBrand(),deck.getModel(),deck.getOS(),deck.getRam(),deck.getStorage());
			} else {
				if(shelf[i] instanceof ROGAlly) {
					ROGAlly rog = (ROGAlly) shelf[i];
					System.out.printf("- %s %s | OS: %s | RAM: %dGB | Storage: %d GB\n",rog.getBrand(),rog.getModel(),rog.getOS(),rog.getRam(),rog.getStorage());
				}
			}
		}
	}

	public void filterByOS(String os) {
		for(int i = 0 ; i < count ; i++) {
			if(shelf[i].getOS().equals(os)) {
				if(shelf[i] instanceof SteamDeck) {
					SteamDeck deck = (SteamDeck)shelf[i];
					System.out.printf("- %s %s | OS: %s | RAM: %dGB | Storage: %d GB\n",deck.getBrand(),deck.getModel(),deck.getOS(),deck.getRam(),deck.getStorage());
				}
			}
		}
	}


	public void startGamingSession(HandheldPC h) {
		if(h instanceof SteamDeck) {

			SteamDeck deck = (SteamDeck)h;
			deck.bootUp();
			System.out.println(deck.getModel() + " is launching Steam Big Picture Mode.");
		} else {

			ROGAlly rog = (ROGAlly)h;
			rog.bootUp();
			if(rog.rgb) {
				System.out.println(rog.getModel() + " is Syncing RGB lights with  game play");
			} else {
				System.out.println(rog.getModel() + " has RGB disabled.");
			}
		}
	}
}